/**
 * MIT License

 Copyright (c) [2019] [Shantam Bajpai]

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */

/*
 * @brief: Include guards for the file walker.h
 */

#ifndef INCLUDE_WALKER_HPP_
#define INCLUDE_WALKER_HPP_

#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <geometry_msgs/Twist.h>

class walker {
 public:
  /*
   * @brief: Constructor for the walker class
   * @param: nh is the node handler declared for creating publisher and subscriber
   * @param: subs is the subscriber to the topic generated by the turtlebot simulation
   * @param: pub is the publisher used to publish velocity data
   */
  walker(ros::NodeHandle nh, ros::Subscriber subs, ros::Publisher pub);

  /*
   * @brief: Destructor for the walker class
   */
  ~walker();

  /*
   * @brief: LaserScan callback
   */
  void laserScanCallback(const sensor_msgs::LaserScan::ConstPtr&);

  /*
   * @brief: obstacle detection method, returns true if obstacle is within range
   */
  bool obstacleInRange();

 private:
  //bool variable to signify whether object is in range or not
  bool obstacleRange;

  //Object to get linear and angular velocity
  geometry_msgs::Twist twist;

  //Turtlebot linear velocity
  float linearVel;

  //Turtlebot angular velocty
  float angularVel;
};

#endif /*INCLUDE_WALKER_HPP_*/
